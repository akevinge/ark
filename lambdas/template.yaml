AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  ParamEnvironment:
    Description: The environment you want to deploy to
    Type: String
    AllowedValues:
      - prod
      - staging
      - dev
    Default: dev
  ParamFeatureBranch:
    Description: Name of feature branch if not main branch
    Type: String
    Default: ""

Resources:
  LogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-Logs"
      AttributeDefinitions:
        - AttributeName: "Location"
          AttributeType: "S"
        - AttributeName: "CreatedAt"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "Location"
          KeyType: "HASH"
        - AttributeName: "CreatedAt"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"

  DynamoDBQueryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-DynamoDBQueryPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:BatchGetitem
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !GetAtt LogsTable.Arn
      Roles:
        - Ref: "LogsTableReadRole"

  LogsTableReadRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-LogsTableReadRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  DynamoDBWritePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-DynamoDBWritePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt LogsTable.Arn
      Roles:
        - Ref: "LogsTableWriteRole"

  LogsTableWriteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-LogsTableWriteRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  ArkApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          UsagePlanName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-UsagePlan"
          CreateUsagePlan: PER_API
          Quota:
            Limit: 600
            Period: "DAY"
          Throttle:
            BurstLimit: 10
            RateLimit: 10

  ArkGetter:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-LogGetter"
      Architectures: ["arm64"]
      Handler: bootstrap
      Runtime: provided.al2
      CodeUri: target/lambda/ark_getter/
      Events:
        GetLogs:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ArkApi
      Role: !GetAtt LogsTableReadRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Select [1, !Split ["/", !GetAtt LogsTable.Arn]]
    DependsOn:
      - LogsTableReadRole

  ArkLogger:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ParamEnvironment}${ParamFeatureBranch}-LogLogger"
      Architectures: ["arm64"]
      Handler: bootstrap
      Runtime: provided.al2
      CodeUri: target/lambda/ark_logger/
      Events:
        CreateLog:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: ArkApi
      Role: !GetAtt LogsTableWriteRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Select [1, !Split ["/", !GetAtt LogsTable.Arn]]
    DependsOn:
      - LogsTableWriteRole

Outputs:
  ArkAPI:
    Description: "API Gateway URL"
    Value: !Sub "https://${ArkApi}.execute-api.${AWS::Region}.amazonaws.com/"
  ArkGetterFunction:
    Description: "Created ArkGetterFunction"
    Value: !GetAtt ArkGetter.Arn
  ArkLoggerFunction:
    Description: "Created ArkLoggerFunction"
    Value: !GetAtt ArkLogger.Arn
